"""
模块是py程序架构的一个核心概念
没一个以扩展名py结尾的python源代码文件都是一个模块
模块名同样也是一个标识符,需要符合标识符的命名规则
在模块中定义的全局变量,函数,类 都是提供给外界直接使用的工具
模块就好比是工具包,要想使用这个工具包中的工具,就需要先导入这个模块

"""

import hm_32_模块测试用
a=hm_32_模块测试用.a
print(a)
ccc=hm_32_模块测试用.ccc()
print(ccc)

print("________________")
#可以用as 给模块起别名
#也要遵从驼峰命名法
import hm_32_模块测试用 as modulea
a=modulea.a
print(a)
ccc=modulea.ccc()
print(ccc)


###from...import..导入
#希望从某一个模块中导入部分工具
#import 模块名是一次性把模块中的所有工具全部导入,通过模块名.方法进行访问
print("*"*20)
from math import sqrt
a=123
b=sqrt(a)
print(b)

import math
a=123
b=math.sqrt(a)
print(b)

"""
如果两个模块,存在同名的函数,那么后导入模块的函数,会覆盖掉先导入的函数
开始时import代码应该统一写在代码的顶部,更容易发现冲突
一旦发现冲突,可以使用as 关键字给其中一个工具起一个别名
"""


"""
from 模块名 import *
导入之后不需要通过模块名.的方式
可以直接使用模块提供的工具 全局变量,函数,类
开发中不推荐使用,因为函数重名没有任何提示,出问题不好排查
"""

from math import *
a=123
b=sqrt(a)
print(b)

"""
模块的搜索顺序
python解释器在导入模块时会
1.搜索当前目录指定模块名的文件,如果有就直接导入
2.如果没有,再搜索系统目录
    在开发时,给文件起名,不要和系统的模块文件重名
    python中每一个模块都有一个内置属性__file__可以查看模块的完整路径
"""
print("0"*20)
import random
rand=random.randint(0,10)
print(rand)
##查看模块源代码位置 __file__属性
print(random.__file__)



"""
原则:每一个文件都应该可以是被导入的
一个独立的python文件就是一个模块
在导入文件时,文件中所有没有任何缩进的代码都会被执行一遍
注意:直接执行的代码不是向外界提供的工具
实际开发场景
    在实际开发中没一个模块都是独立开发的大多都有专人负责
    开发人员通常会在模块下方增加一些测试代码
    仅在模块内使用,而被导入到其他文件中不需要执行
"""

import hm_32_模块测试用
"""
__name__ 属性
可以做到,测试模块的代码旨在测试情况下被运行,而在被导入时不会被执行
__name__是python的一个内置属性,记录着一个字符串
如果是被其他文件导入的,__name__就是模块名
如果是当前执行的程序__name__ 是__main__
"""


#文件被导入时,能够直接执行的代码不需要被执行!
#对模块进行测试
def say_hell0():
    print("nihao ")
#***********重要
if __name__=="__main__":
    print(__name__)
    print("小明开发的模块")
    say_hell0()
