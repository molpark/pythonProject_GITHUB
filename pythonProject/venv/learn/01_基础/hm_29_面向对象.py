"""
类和对象的概念
类和对象是面向对象编程的两个核心概念
1.1类
类是对一群具有相同特征或行为的事务的一个统称,是抽象的不能直接使用
 特征被称为属性
 行为被称为方法
类就相当于制造飞机时的图纸,是一个模板,是"负责创建对象的"
1.2对象
对象是由类创建出来的一个具体的存在,可以直接使用
由哪一个类创建出来的对象,就拥有在哪一个类中的定义的:
 属性
 方法
对象就相当于图纸制造的飞机
 在程序开发中,应该先有类,再有对象

2.类和对象的关系
类是模板,对象是根据类这个模板创建出来的,应该先有类再有对象
类只有一个对象可以有很多歌
 不同的对象之间属性可能会各不相同
类中定义了什么属性和方法,对象中就有什么属性和方法,不可能多,也不可能少

3.类的设计
在使用面向对象开发前,应该首先分析需求,确定一下程序中需要包含哪些类
在开发中,要设计一个类,通常需要满足以下三个要素:
1.类名这类食物的名字,满足大驼峰命名法  HelloWorld
2.属性这类食物具有什么样的特征
3.方法这类事务具有什么样的行为
大驼峰命名法
HelloWorld
1.没一个单词的首字母大写
2.单词与单词之间没有下划线
3.1 类名的确定
名词提炼法分析整个业务流程,出现的名词,通常就是找到的类
3.2属性和方法的确定
对 对象的特征描述,通常可以定义成属性
对象具有的行为通常可以定义成方法
 提示:需求中没有涉及的属性或者方法在设计类时,不需要考虑

"""

##练习
"""
小明今年18岁,身高1.75,每天早上跑完步会吃东西
小美....

类是人   属性姓名身高 方法 跑步,吃
对象是 小明 小美
"""

############################
"""
ab=[]
ab.count
能够点的说明ab是一个对象

dir内置函数:可以查看python提供的内置方法/属性
def demo():
    """"""
    print("213")

dir(demo)
##两个下划线
demo.__doc__
"""

"""
定义简单的类(只包含方法)
面向对象是更大的封装,在一个类中封装多个方法,这样遇到这个类
创建出来的对象,就可以直接调用这些方法了

"""
##在类中定义方法第一个参数必须是self
#命名规则要符合大驼峰命名法
class Demo:
    def demo1(self):
        pass
    def demo2(self):
        pass


var=Demo()

###第一个面向对象程序
"""
需求:小猫爱吃鱼,小猫爱喝水
分析:
1,定义一个猫类
2.定义两个方法,吃,喝
3.按照需求,不需要定义属性
   cat
eat(self):
drink(self):
"""
"""
使用self在方法内部输出每一只猫的名字
由哪一个对象调用的方法,方法内的self就是哪一个对象的引用
在类封装的方法内部,self就表示当前调用方法的对象自己
调用方法是,程序员不需要传递self参数
在方法内部
  1,可以通过self. 方位对象的属性
  2.也可以通过self. 调用其他的对象方法
"""

class Cat:
    def eat(self):
        #哪一个对象调用的方法,self就是哪一个对象的引用
        print("%s吃%s"%(self.name,self.age))
    def drink(self):
        print("%s喝"%self.name)
    def __init__(self):
        print("初始化方法")
        #self.属性名=属性的初始值
        self.age="18"

###规范使用方法
#使用类名()创建对象的时候,会自动调用初始化方法__init__
peter=Cat()
peter.name="xiaomei"
peter.drink()
peter.eat()
print(peter.age)


print(peter)

##可以使用 .属性名   利用赋值语句就可以了
#不推荐这种写法,这种写法只是可以给临时对象增加属性
tom=Cat()
tom.name="xiaoming"
print(tom.name)

###self参数
tom.eat()


####真正应该将属性封装在类当中
"""
初始化方法
当时用 类名()创建对象时,会自动执行以下操作
    1.为对象在内存中分配空间  --创建对象
    2.为对象的属性设置初始值 --初始化方法(init)
 这个初始化方法就是 __init__方法,__init__是对象的内置方法
 __init__ 方法是专门用来定义一个类具有哪些属性的方法!!
"""
# 在cat 中增加__init__ 方法,

class Cat:
    def eat(self):
        #哪一个对象调用的方法,self就是哪一个对象的引用
        print("%s吃%s"%(self.name,self.age))
    def drink(self):
        print("%s喝"%self.name)
    def __init__(self):
        print("初始化方法")
        #self.属性名=属性的初始值
        self.age="18"
        self.name="Tom"
tom=Cat()
print(tom.name)
lazy_cat=Cat()
lazy_cat.eat()